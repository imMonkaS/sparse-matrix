"""
–ó–∞–ø—Ä–µ—â–µ–Ω–æ –¥–µ—Ä–∂–∞—Ç—å –º–∞—Ç—Ä–∏—Ü—É –≤ —á–∏—Å—Ç–æ–º –≤–∏–¥–µ

–†–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –º–∞—Ç—Ä–∏—Ü
–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã

–ú–µ–Ω—è–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–ø–æ–ª–Ω–æ—Å—Ç–∏ —ç—Ç–æ–π –º–∞—Ç—Ä–∏—Ü—ã

–î–µ–π—Å—Ç–≤–∏–µ —Å —ç—Ç–∏–º–∏ –º–∞—Ç—Ä–∏—Ü–∞–º–∏

–ì—Ä–∞—Ñ–∏–∫ üìà

–ï—Å–ª–∏ 50% 0 –∞ 50% 1 —Ç–æ –æ–Ω–∞ –Ω–µ —Ä–∞–∑—å–µ–∂.
"""

from tests import *
SRC_PATH = 'sources/'


def main():
    # pairs = [
    #     (10, 70),
    #     (100, 70),
    #     (100, 90),
    #     (1000, 70),
    #     (1000, 90),
    #     (10000, 65),
    #     (10000, 95),
    #     (100000, 65),
    #     (100000, 95)
    # ]
    #
    # for pair in pairs:
    #     create_testing_data(
    #         pair[0],
    #         pair[1] / 100,
    #         SRC_PATH + f'report/{pair[0]}_{pair[1]}/data.txt',
    #         SRC_PATH + f'report/{pair[0]}_{pair[1]}/data.txt',
    #     )

    # size = 10000
    # dens = 95
    # create_testing_data(
    #     size,
    #     dens / 100,
    #     SRC_PATH + f'report/{size}_{dens}/data.txt',
    #     SRC_PATH + f'report/{size}_{dens}/output.txt',
    #     head=10,
    #     tail=10
    # )

    binary_search(2, 2)


if __name__ == '__main__':
    main()
